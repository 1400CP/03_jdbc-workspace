package com.kh.common;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

// 공통 템플릿(매번 반본적으로 작성될 코드를 메소드로 정의해둠)

public class JDBCTemplate {
	// 모든 메소드 싹 다 static 메소드 => Math.random() 이거랑 비슷 => Java에서 static은 공유를 뜻함
	// 싱글톤 패턴 : 메모리 영역에 단 한번만 올려두고 매번 재사용하는 개념.
	
	
	// 1. Connection 객체 생성(DB와 접속한 후 해당 Connection 반환해주는 메소드
	
	public static Connection getConnection() {
		
		Connection conn = null;
		
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","JDBC","JDBC");
			conn.setAutoCommit(false);
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return conn;
		
	}
	
	// 2. commit 처리해주는 메소드. (Connection을 전달받아서)
	public static void commit(Connection conn) { //매개변수 => 남이주는 거 받는 자리)
		try {
			if(conn != null && !conn.isClosed()) {
				conn.commit();
			}
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
		
		
	}
	
	
	// 3. rollback 처리해주는 메소드(Connection 전달받아서)
	public static void rollback(Connection conn) {
		try {
			if(conn != null && !conn.isClosed()) {
				conn.rollback();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}

	
	// JDBC용 객체들 전달받아서 반납처리해주는 메소드
	// 4. Statement 관련 객체 전달받아서 반납시켜주는 메소드
	public static void close(Statement stmt) { // 다형성으로 PreparedStatement도 적용가능
		try {
			if(stmt != null && !stmt.isClosed()) {
				stmt.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	
	// 5. Connection 객체 전달받아서 반납시켜주는 메소드
	public static void close()
	
	
}
