package com.kh.controller;

import java.util.ArrayList;

import com.kh.model.service.ProductService;
import com.kh.model.vo.Product;
import com.kh.model.vo.ProductIO;
import com.kh.view.ProductMenu;

public class ProductController {
	
	// case 1
	public void selectProductIO() {
		// 전부 조회하기 위해서 필요한 물품들
		// select => 전부 => ArrayList	
		
		ArrayList<ProductIO> list = new ProductService().selectProductIO();
		
		if(list.isEmpty()) {
			new ProductMenu().displayNoData("조회 실패");
		}else {
			new ProductMenu().displayProductIOList(list);
		}
		
		
	}
	
	
	// case 2
	public void insertProductIO(String productId, String ioDate, String amount, String status) {
		// 추가하기 insert into => product에 전부 넣기. 테이블 컬럼!
		ProductIO pd = new ProductIO(productId, ioDate, Integer.parseInt(amount), status);

		int result = new ProductService().insertProductIO(pd);
		
		if(result > 0) {
			new ProductMenu().displaySuccess("데이터 추가 성공이요");
		}else {
			new ProductMenu().displayFail("실패요. 다시 시도해 주세욤.");
		}
		
	}
	
	
	// case 3
	public void updateProductIO(String productId, String ioDate, String amount, String status) {
		
		ProductIO pd = new ProductIO(productId, ioDate, Integer.parseInt(amount), status);
		
		int result = new ProductService().updateProductIO(pd);
		
		if(result > 0) {
			new ProductMenu().displaySuccess("수정 완료");
		}else {
			new ProductMenu().displayFail("실패요. 다시.");
		}
		
		
	}
	
	
	// case 4
	public void deleteProductIO(String productId) {
		int result = new ProductService().deleteProduct(productId);
		
		if(result > 0) {
			new ProductMenu().displaySuccess("성공적으로 삭제");
		}else {
			new ProductMenu().displayFail("실패, 다시 시도");
		}
		
	}
	
	
	// case 5
	public void searchProductIO(String productName) {
		//select
		Product pd = new ProductService().searchProductIO(productName);
		
		if(pd == null) {
			new ProductMenu().displayFail("실패, 재시도ㄱㄱ");
		}else {
			new ProductMenu().displayProduct(pd);
		}
		
	}
	
	//case6_1, 전체 입출고 내역 조회	
	public void selectAll() {
		//ArrayList
		ArrayList<ProductIO> list = new ProductService().selectAll();
		
		if(list.isEmpty()) {
			new ProductMenu().displayNoData("조회 실패");
		}else {
			new ProductMenu().displayProductIOList(list);
		}
		
	}
	
	//case6_2
	public void selectIn() {
		
		ArrayList<ProductIO> list = new ProductService().selectIn();
		
		if(list.isEmpty()) {
			new ProductMenu().displayNoData("조회 실패");
		}else {
			new ProductMenu().displayProductIOList(list);
		}
		
	}
	
	//case6_3
	public void selectOut() {
		
		ArrayList<ProductIO> list = new ProductService().selectOut();
		
		if(list.isEmpty()) {
			new ProductMenu().displayNoData("조회 실패");
		}else {
			new ProductMenu().displayProductIOList(list);
		}
		
	}
	
	//case6_4 상품 입고 => insert 네
	public void insertStatus(String productId, String amount) {
		int result = new ProductService().insertStatus(productId, amount);
		
		if(result > 0) {
			new ProductMenu().displaySuccess("상품 입고!");
		}else {
			new ProductMenu().displayFail("실패. 재시도.");
		}

	}
	
	//case6_5 상품 출고 => insert 네
	public void outputStatus(String productId, String amount) {
		int result = new ProductService().outputStatus(productId, amount);
		
		if(result > 0) {
			new ProductMenu().displaySuccess("상품 입고!");
		}else {
			new ProductMenu().displayFail("실패. 재시도.");
		}

	}

}
