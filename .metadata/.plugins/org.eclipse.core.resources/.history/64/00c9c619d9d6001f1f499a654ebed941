package com.kh.model.dao;

import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Properties;

import static com.kh.common.JDBCTemplate.*;
import com.kh.model.vo.Member;

public class MemberDao {
	
	/*
	 * 기존의 방식 : DAO 클래스에 사용자가 요청할 때마다 실행해야 되는 SQL문을 자바소스코드 내에 명시적으로 작성 
	 * => 정적 코딩 방식
	 * > 문제점 : SQL문을 수정해야 될 경우 자바소스코드를 수정해야 됨 => 수정된 내용을 반영시키고자 한다면 프로그램을 재기동해야 됨!
	 * 
	 * > 해결 방식 : SQL문을 별도로 관리하는 외부파일(.xml)로 만들어서 실시간으로 그 파일에 기록된 SQL문을 읽어들여서 실행
	 * => 동적코딩 방식
	 */
	
	private Properties prop = new Properties();
	
	// 사용자가 어떤 서비스를 요청할 때마다 계속 new MemberDao().XXXX() 호출!
	// 즉, 서비스 요청할 때마다 이 기본생성자가 매번 실행됨!!!
	
	public MemberDao() { // 기본생성자
		// prop.loadFromXML(파일입력용스트림생성);
		// 여기에다가 뭔가를 쓰면 => 쿼리를 읽어들이는 코드를 쓰면!
		// 계속해서 쿼리를 읽어준다!!!
		try {
			prop.loadFromXML(new FileInputStream("resources/query.xml"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}	
	
	
	
	
	public int insertMember(Connection conn, Member m) {
		// insert문 => 처리된 행수(int) => 트랜젝션인데(이건 Service로)
		int result = 0;
		PreparedStatement pstmt = null; // 커넥션은 이미 common에서 다 받은 것임
		
		String sql = prop.getProperty("insertMember");
		
		// 3) PreparedStatement 객체 생성
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, m.getUserId());
			pstmt.setString(2, m.getUserPwd());
			pstmt.setString(3, m.getUserName());
			pstmt.setString(4, m.getGender());
			pstmt.setInt(5, m.getAge());
			pstmt.setString(6, m.getEmail());
			pstmt.setString(7, m.getPhone());
			pstmt.setString(8, m.getAddress());
			pstmt.setString(9, m.getHobby());
			
			// 4, 5) sql문 실행 및 결과 받기
			result = pstmt.executeUpdate();
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally { // conn 빼고 Statement 만 close(); 해야 함. Service, common에 있는 걸 해야 함. 트랜젝션 때문에 그럼.
			close(pstmt);
		}
		
		return result;
		
	}

	// case 6
	public int deleteMember(Connection conn, String userId) {
		// delete => 처리한 행 수(int) => 트랜젝션(Service처리)
		int result = 0;
		
		PreparedStatement pstmt = null;
		
		String sql = prop.getProperty("deleteMember");
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, userId);
			
			result = pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(pstmt);
		}
		
		return result;
		
	}
	
	// case 2
	public ArrayList<Member> selectList(Connection conn) {
		// select => 단체 조회, 배열, ResultSet
		
		ArrayList<Member> list = new ArrayList<Member>();
		PreparedStatement pstmt = null;
		
		ResultSet rset = null;
		
		String sql = prop.getProperty("selectList");
		
		try {
			pstmt = conn.prepareStatement(sql);
			
			rset = pstmt.executeQuery();
			while(rset.next()) {
				list.add(new Member(rset.getInt("USERNO"),
									rset.getString("USERID"),
									rset.getString("USERPWD"),
									rset.getString("USERNAME"),
									rset.getString("GENDER"),
									rset.getInt("AGE"),
									rset.getString("EMAIL"),
									rset.getString("PHONE"),
									rset.getString("ADDRESS"),
									rset.getString("HOBBY"),
									rset.getDate("ENROLL_DATE")
									));
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(rset);
			close(pstmt);
		}
		
		return list;
		
	}
	
	// case 3
	public Member selectByUserId(Connection conn, String userId) {
		// select => 조회는 (int)가 아니야 ResultSet이야 => Member 객체
		Member m = null;
		
		PreparedStatement pstmt = null;
		
		ResultSet rset = null;
		// SELECT * FROM MEMBER WHERE USERID = ?
		String sql = prop.getProperty("selectByUserId");
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, userId);
			
			rset = pstmt.executeQuery();
			
			if(rset.next()) {
				m = new Member(rset.getInt("USERNO"),
								rset.getString("USERID"),
								rset.getString("USERPWD"),
								rset.getString("USERNAME"),
								rset.getString("GENDER"),
								rset.getInt("AGE"),
								rset.getString("EMAIL"),
								rset.getString("PHONE"),
								rset.getString("ADDRESS"),
								rset.getString("HOBBY"),
								rset.getDate("ENROLL_DATE")
								);
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(rset);
			close(pstmt);
		}
		
		return m;
		
	}
	
	// case 4
	public ArrayList<Member> selectByUserName(Connection conn, String keyword) {
		// select => 조회, ResultSet (여러행도 가능), ArrayList, Member?
		
		ArrayList<Member> list = new ArrayList<Member>();
		
		PreparedStatement pstmt = null;
		
		ResultSet rset = null;
		// SELECT * FROM MEMBER WHERE USERNAME LIKE '%?%';
		String sql = prop.getProperty("selectByUserName");
		// String sql = "SELECT * FROM MEMBER WHERE USERNAME LIKE '%' || ? || '%'";
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, "%" + keyword + "%");
			// pstmt.setString(1, keyword);
			
			rset = pstmt.executeQuery();
			
			while(rset.next()) {
				list.add(new Member(rset.getInt("USERNO"),
									rset.getString("USERID"),
									rset.getString("USERPWD"),
									rset.getString("USERNAME"),
									rset.getString("GENDER"),
									rset.getInt("AGE"),
									rset.getString("EMAIL"),
									rset.getString("PHONE"),
									rset.getString("ADDRESS"),
									rset.getString("HOBBY"),
									rset.getDate("ENROLL_DATE")
									));
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(rset);
			close(pstmt);
		}
		
		return list;
		
	}
	
	// case 5
	public int updateMember(Connection conn, Member m) {
		// update => 처리된 행 수(int) => 트랜젝션(Service)
		int result = 0;
		PreparedStatement pstmt = null;
		// UPDATE MEMBER SET USERPWD = ?, EMAIL = ?, PHONE = ?, ADDRESS = ? WHERE USERID = ?"
		String sql = prop.getProperty("updateMember");
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, m.getUserPwd());
			pstmt.setString(2, m.getEmail());
			pstmt.setString(3, m.getPhone());
			pstmt.setString(4, m.getAddress());
			pstmt.setString(5, m.getUserId());
			
			result = pstmt.executeUpdate();
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(pstmt);
		}
		
		return result;
		
	}
	
	// case 7
	public void loginMember(Connection conn, String userId, String userPwd) {
		//select => ResultSet (단일행) 아이디는 중복x => Member 객체 X, String
		String userName = null;
		
		PreparedStatement pstmt = null;
		
		ResultSet rset = null;
		
		String sql = prop.getProperty("loginMember");
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, userId);
			pstmt.setString(2, userPwd);
			
			rset = pstmt.executeQuery();
			
			if(rset.next()) {
				userName = rset.getString("username");
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(rset);
		}
		
	}
	
	
	
}









