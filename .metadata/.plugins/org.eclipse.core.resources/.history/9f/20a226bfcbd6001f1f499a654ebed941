package com.kh.common;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

// 공통 템플릿(매번 반본적으로 작성될 코드를 메소드로 정의해둠)

public class JDBCTemplate {
	// 모든 메소드 싹 다 static 메소드 => Math.random() 이거랑 비슷 => Java에서 static은 공유를 뜻함
	// 싱글톤 패턴 : 메모리 영역에 단 한번만 올려두고 매번 재사용하는 개념.
	
	
	// 1. Connection 객체 생성(DB와 접속한 후 해당 Connection 반환해주는 메소드)
	
	/*
	 * 기존의 방식 : jdbc driver, 접속할 db의 url, 접속할 계정명/비밀번호 등을 자바 소스코드 내에 명시적으로 작성함
	 * => 정적코드 방식 (오라클 driver, url 변경 등 문제가 있음)
	 * 
	 * > 문제점 : dbms가 변경되었을 경우, 접속할 db의 url 또는 계정명/비밀번호 변경될 경우 => 자바 소스코드를 수정해야 됨!
	 * 			=> 수정된 내용을 반영시키고자 한다면 프로그램 재구동 해야 됨!! (프로그램이 비정상적으로 종료됐다가 다시 구동)
	 * 			=> 유지보수에 불편하다!!
	 * > 해결방식 : db관련된 정보들을 별도로 관리하는 외부파일(.properties)로 만들어서 관리!
	 * 				외부파일로부터 읽어들여서 반영시키면 됨!!
	 * => 동적코딩방식
	 * 
	 */
	
	public static Connection getConnection() {
		
		Connection conn = null;
		Properties prop = new Properties();
		
		try {
			prop.load(new FileInputStream("resources/driver.properties"));
			
			Class.forName(prop.getProperty("driver"));					// 정적코딩방식 => 동적코딩방식
			conn = DriverManager.getConnection(prop.getProperty("url"),
												prop.getProperty("username"),
												prop.getProperty("password"));
			conn.setAutoCommit(false);
			
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return conn;
		
	}
	
	// 2. commit 처리해주는 메소드. (Connection을 전달받아서) / (자료형 변수명)
	public static void commit(Connection conn) { //매개변수 => 남이주는 거 받는 자리)
		try {
			if(conn != null && !conn.isClosed()) {
				conn.commit();
			}
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
		
	}
	
	
	// 3. rollback 처리해주는 메소드(Connection 전달받아서) / (자료형 변수명)
	public static void rollback(Connection conn) {
		try {
			if(conn != null && !conn.isClosed()) {
				conn.rollback();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}

	
	// JDBC용 객체들 전달받아서 반납처리해주는 메소드
	// 4. Statement 관련 객체 전달받아서 반납시켜주는 메소드
	public static void close(Statement stmt) { // 다형성으로 PreparedStatement도 적용가능
		try {
			if(stmt != null && !stmt.isClosed()) {
				stmt.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}
	
	
	// 5. Connection 객체 전달받아서 반납시켜주는 메소드 (오버로딩 적용 -- 자료형이나 변수명이 다른 경우 가능)
	public static void close(Connection conn) { // (자료형 변수명)
		try {
			if(conn != null && !conn.isClosed()) {
				conn.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}
	
	
	// 6. ResultSet 객체 전달받아서 반납시켜주는 메소드
	public static void close(ResultSet rset) {
		try {
			if(rset != null && !rset.isClosed()) {
				rset.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}
	
}
