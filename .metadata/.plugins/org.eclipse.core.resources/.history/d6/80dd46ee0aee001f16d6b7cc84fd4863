package com.kh.common;

import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

public class JDBCTemplate {
	
	// 1. Connection 객체 생성한 후 Connection 객체를 반환시켜주는 getConnection 메소드
	public static Connection getConnection() {
		
		Connection conn = null;
		
		Properties prop = new Properties(); // Map 계열 컬렉션(Key-value)
//		prop.load(입력용 스트림);
//		prop.load(new FileInputStream("driver.properties 경로"));
		// 내가 읽어들이고자 하는 driver.properties 파일의 물리적인 경로
		// WEB-INF에 들어가 있는 이유는 src이기 때문에, src에서 작성하는 건 모두 classes에 들어간다.
		
//		String filePath = JDBCTemplate.class
//		JDBCTemplate가 있는 class로 가서
		
		String filePath = JDBCTemplate.class.getResource("/db/driver/driver.properties").getPath();
		// getResource를 해줘.
//		prop.load(new FileInputStream("driver.properties 경로"));
		
		try {
			prop.load(new FileInputStream(filePath));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		// "C:\05_server-workspace2\jspProject\WebContent\WEB-INF\classes\db\driver\driver.properties
		
		// jdbc driver 등록
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			// 접속하고자 하는 db의 url, 계정명, 비번 제시해서 Connection 객체 생성
			conn = DriverManager.getConnection(prop.getProperty("url"),
												prop.getProperty("username"),
												prop.getProperty("password"));
			// driver.properties는 기본 key=value 값으로 형성되어있음.
			conn.setAutoCommit(false);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return conn;
		
	}
	
	// 2_1. Connection 객체를 전달받아서 commit 시켜주는 commit 메소드
	public static void commit(Connection conn) {
		try {
			if(conn != null && !conn.isClosed()) { // 널이 아니거나 닫혀있지 않을 때
				conn.commit();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	// 2_2. Connection 객체를 전달받아서 rollback 시켜주는 rollback 메소드
	public static void rollback(Connection conn) {
		try {
			if(conn != null && !conn.isClosed()) { // 널이 아니거나 닫혀있지 않을 때
				conn.rollback();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	// 오버로딩 (메소드 이름은 똑같은데 안에 ("")값은) 
	// 3_1. Connection 객체를 전달받아서 반납시켜주는 close 메소드
	public static void close(Connection conn) {
		try {
			if(conn != null && conn.isClosed()) {
				conn.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	// 3_2. Statement 객체를 전달받아서 반납시켜주는 close 메소드
	public static void close(Statement stmt) {
		try {
			if(stmt != null && !stmt.isClosed()) {
				stmt.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	// 3_3. ResultSet 객체를 전달받아서 반납시켜주는 close 메소드
	public static void close(ResultSet rset) {
		try {
			if(rset != null && !rset.isClosed()) {
				rset.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	

}
