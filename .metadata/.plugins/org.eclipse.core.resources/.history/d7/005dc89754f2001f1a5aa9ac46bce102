package com.kh.notice.dao;

import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Properties;

import static com.kh.common.JDBCTemplate.*;
import com.kh.notice.vo.Notice;

public class NoticeDao {
	
	private Properties prop = new Properties(); // 전역변수

	public NoticeDao() { // 기본생성자 => 쿼리를 읽어와야 함, 
//		prop.loadFromXML(new FileInputStream(읽어드리고자 하는 xml 파일 경로)); // xml은 전용이 있으니까 반드시 이것으로!
		try {
			prop.loadFromXML(new FileInputStream(NoticeDao.class.getResource("/db/sql/notice-mapper.xml").getPath()));
			
			
		} catch (IOException e) {
			e.printStackTrace();
		} // 실제로는 WebContent에 올라감.
	}
	
	public ArrayList<Notice> selectNoticeList(Connection conn) {
		// select문 => ResultSet => 여러 행일 가능성(가능성 파악이 중요함) => ArrayList
		ArrayList<Notice> list = new ArrayList<Notice>(); //[] : 빈상태
		
		PreparedStatement pstmt = null;
		
		ResultSet rset = null;
		
		String sql = prop.getProperty("selectNoticeList");
		
		try {
			pstmt = conn.prepareStatement(sql); // 완성된 sql문
			
			rset = pstmt.executeQuery();
			
			while(rset.next()) {
				list.add(new Notice(rset.getInt("notice_no"),
									rset.getString("notice_title"),
									rset.getString("user_id"),
									rset.getInt("count"),
									rset.getDate("create_date")
						));
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(rset);
			close(pstmt);
		}
		return list;
		
	}
	
	public int insertNotice(Connection conn, Notice n) {
		// insert문 => 처리된 행수 => 트랜잭션
		int result = 0;
		
		PreparedStatement pstmt = null;
		
		String sql = prop.getProperty("insertNotice");
		
		try {
			pstmt = conn.prepareStatement(sql); // 미완성
			pstmt.setString(1, n.getNoticeTitle());
			pstmt.setString(2, n.getNoticeContent());
			pstmt.setInt(3, Integer.parseInt(n.getnoticeWriter()));
			
			result = pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(pstmt);
		}
		return result;
		
	}
	
	public int increaseCount(Connection conn, int noticeNo) {
		// update문, 처리된 행수(int) => 트랜잭션
		// sql문 짜러가자
		int result = 0;
		
		PreparedStatement pstmt = null;
		
		String sql = prop.getProperty("increaseCount");
		
		try {
			pstmt = conn.prepareStatement(sql); // 미완성
			
			pstmt.setInt(1, noticeNo);
			
			result = pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(pstmt);
		}
		return result;
		
	}
	
	public Notice selectNotice(Connection conn, int noticeNo) {
		
		
		
	}
	
	
}
