package com.kh.model.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import static com.kh.common.JDBCTemplate.*;
import com.kh.model.vo.Book;
import com.kh.model.vo.Magazine;

public class BookDao {
	
	public int inputBookMenu(Connection conn, Book b) {
		// input(추가) => 추가된 행 수(int) => 트랙젝선 (service)
		
		int result = 0;
		
		PreparedStatement pstmt = null;
		// INSERT INTO BOOK VALUES (?, ?, ?, ?, ?, ?)
		String sql = "INSERT INTO BOOK VALUES (SEQ_BNO.NEXTVAL, ?, ?, ?, ?, ?)";
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, b.getTitle());
			pstmt.setString(2, b.getAuthor());
			pstmt.setString(3, b.getPublisher());
			pstmt.setInt(4, b.getPrice());
			pstmt.setString(5, b.getDescription());
			
			result = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(pstmt);
		}
		
		return result;
		
	}
	
	public int inputMagazineMenu(Connection conn, Magazine m) {
		// input(추가) => 추가된 행 수(int) => 트랙젝선 (service)
		
		int result = 0;
		
		PreparedStatement pstmt = null;
		// INSERT INTO BOOK VALUES (?, ?, ?, ?, ?, ?)
		String sql = "INSERT INTO MAGAZINE VALUES (SEQ_BNO.NEXTVAL, ?, ?, ?, ?, ?, ?, ?)";
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, m.getTitle());
			pstmt.setString(2, m.getAuthor());
			pstmt.setString(3, m.getPublisher());
			pstmt.setInt(4, m.getPrice());
			pstmt.setString(5, m.getDescription());
			pstmt.setInt(6, m.getYear());
			pstmt.setInt(7, m.getMonth());
			
			result = pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(pstmt);
		}
		
		return result;
		
	}
	
	
	// case 3_1
	public Book selectBNo(Connection conn, String bNo) {
		// select => 한 행 조회 => ResultSet
		Book b = null;
		
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		
		String sql = "SELECT * FROM BOOK WHERE BNO = ?";
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, bNo);
			
			rset = pstmt.executeQuery();
			if(rset.next()) {
				b = new Book(
							rset.getString("BNO"),
							rset.getString("TITLE"),
							rset.getString("AUTHOR"),
							rset.getString("PUBLISHER"),
							rset.getInt("PRICE"),
							rset.getString("DESCRIPTION")
							);
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(rset);
			close(pstmt);
		}
		
		return b;
		
	}
	
	//case3_2
	public Book selectTitle(Connection conn, String title) {
		// select => 한 행 조회 => ResultSet
		Book b = null;
		
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		
		String sql = "SELECT * FROM BOOK WHERE TITLE = ?";
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, title);
			
			rset = pstmt.executeQuery();
			if(rset.next()) {
				b = new Book(
							rset.getString("BNO"),
							rset.getString("TITLE"),
							rset.getString("AUTHOR"),
							rset.getString("PUBLISHER"),
							rset.getInt("PRICE"),
							rset.getString("DESCRIPTION")
							);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(rset);
			close(pstmt);
		}
		
		return b;
		
	}
	
	//case3_3
	public Magazine selectYear(Connection conn, String year) {
		// select => 한 행 조회 => ResultSet
		// selcect인데 ArrayList가 필요했네. 여러행이었다. 수정필요.
		Magazine m = null;
		
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		
		String sql = "SELECT * FROM MAGAZINE WHERE YEAR = ?";
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, year);
			
			rset = pstmt.executeQuery();
			if(rset.next()) {
				m = new Magazine(
							rset.getString("BNO"),
							rset.getString("TITLE"),
							rset.getString("AUTHOR"),
							rset.getString("PUBLISHER"),
							rset.getInt("PRICE"),
							rset.getString("DESCRIPTION"),
							rset.getInt("YEAR"),
							rset.getInt("MONTH")
							);
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(rset);
			close(pstmt);
		}
		
		return m;
		
	}
	
	//case3_4
	public Book selectPs(Connection conn, String publisher) {
		// select => 한 행 조회 => ResultSet
		// selcect인데 ArrayList가 필요했네. 여러행이었다. 수정필요.
		Book b = null;
		
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		
		String sql = "SELECT * FROM BOOK WHERE PUBLISHER = ?";
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, publisher);
			
			rset = pstmt.executeQuery();
			if(rset.next()) {
				b = new Book(
							rset.getString("BNO"),
							rset.getString("TITLE"),
							rset.getString("AUTHOR"),
							rset.getString("PUBLISHER"),
							rset.getInt("PRICE"),
							rset.getString("DESCRIPTION")
							);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(rset);
			close(pstmt);
		}
		
		return b;
		
	}
	
	//case3_5
	public Book selectPrice(Connection conn, String price) {
		// select => 한 행 조회 => ResultSet
		// selcect인데 ArrayList가 필요했네. 여러행이었다. 수정필요.
		Book b = null;
		
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		
		String sql = "SELECT * FROM BOOK WHERE PRICE <= ?";
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, price);
			
			rset = pstmt.executeQuery();
			if(rset.next()) {
				b = new Book(
							rset.getString("BNO"),
							rset.getString("TITLE"),
							rset.getString("AUTHOR"),
							rset.getString("PUBLISHER"),
							rset.getInt("PRICE"),
							rset.getString("DESCRIPTION")
							);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(rset);
			close(pstmt);
		}
		
		return b;
		
	}
	
	//case4_1, return을 뭘로 해야 하나?
	public Book getTotalPrice(Connection conn, String price) {
		// select문 - 한 행 - ResultSet인데, if(rset.next())
		Book b = null;
		
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		// 전체 책 가격 합
		// SELECT SUM(PRICE) FROM BOOK GROUP BY PRICE
		String sql = "SELECT SUM(?) FROM BOOK";
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, price);
			
			rset = pstmt.executeQuery();

			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(rset);
			close(pstmt);
		}
		
		return b;
		
	}
	
	//case4_2
	public Book getAvgPrice(Connection conn) {
		// select문 - 한 행 - ResultSet인데, if(rset.next())
		Book b = null;
		
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		// 전체 책 가격 합
		// SELECT SUM(PRICE) FROM BOOK GROUP BY PRICE
		String sql = "SELECT AVG(PRICE) FROM BOOK";
		
		try {
			pstmt = conn.prepareStatement(sql);
			rset = pstmt.executeQuery();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(rset);
			close(pstmt);
		}
		
		return b;
		
	}
	
	
	//case2_1
	public void selectList1() {
		
		
	}
	
	//case2_2
	public void selectList2(Connection conn) {
		//select문, 다행열, ArrayList, ResultSet
		ArrayList<Book> list = new ArrayList<Book>();
		
		PreparedStatement pstmt = null;
		ResultSet rset = null;
		
		String sql = "";
		
		try {
			pstmt = conn.prepareStatement(sql);
			
			rset = pstmt.executeQuery();
					
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			
		}
		
		
	}

}
